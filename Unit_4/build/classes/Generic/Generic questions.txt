Generic Programming:
->classes, methods and restrictions.
->restrictions-things that can't be performed in generic
->Primitive datatype:
  ->int-Integer
  ->float-Float
  ->double-Double
->collections:
  ->use only wrapper classes(int,String,char,float,boolean,byte....)
  ->ArrayList<int>
->Advantages:
  ->Type specific //handles only the particular datatype
  ->No type casting //conversion-int to double
  ->Easily finds error

Creation of classes:
->Syntax:
  classname<T> //T-generic class(represents the datatype),small/capital
  {
    method()
    {
    }
  }
  
  name<Integer> obj=new name<Integer>(); //generic
  name<Character> obj1=new name<Character>(); 
  obj.method();
  <T>   //1 datatype
  <T,V> //2 datatypes
  
  ArrayList<Integer> obj=new ArrayList<>();
  obj.add(10);
  
  class name<T extends Number>
  {
  }

  scope <T,V> return_type methodname(T value,V value1) // method(int a,int b)
  {
  }

Questions:
1. Get value and class name for Parameters.
2. Get value and class name for two Parameters.
3. Generic class to find the elements of the given type.
4. Bounded class type to find the sum and average of the given array type.
5. Generic method to find an element is present in the given array type.